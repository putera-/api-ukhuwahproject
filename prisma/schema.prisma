// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Client {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(100)
  nick      String   @db.VarChar(20)
  slogan    String?  @db.VarChar(255)
  address   String?  @db.Text
  phone     String?  @db.VarChar(20)
  logo      String?  @db.VarChar(100)
  youtube   String?  @db.VarChar(100)
  instagram String?  @db.VarChar(100)
  facebook  String?  @db.VarChar(100)
  twitter   String?  @db.VarChar(100)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique @db.VarChar(100)
  name      String   @db.VarChar(100)
  password  String   @db.VarChar(100)
  auth      Auth[]
  blogs     Blog[]
  role      UserRole @default(MEMBER)
  avatar    String?  @db.VarChar(255)
  avatar_md String?  @db.VarChar(255)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum UserRole {
  SUPERUSER
  ADMIN
  STAFF
  MEMBER
}

model Auth {
  id        String   @id @default(uuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String
  token     String   @db.VarChar(300)
  expiredAt DateTime @db.Timestamp()
  path      String   @db.VarChar(255)
  method    String   @db.VarChar(10)
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Blog {
  id             String       @id @default(uuid())
  title          String       @db.VarChar(100)
  content        String       @db.Text
  author         User         @relation(fields: [authorId], references: [id])
  authorId       String
  category       BlogCategory @relation(fields: [blogCategoryId], references: [id])
  blogCategoryId String
  photos         Photo[]
  status         BlogStatus   @default(DRAFT)
  deleted        Boolean      @default(false)
  publishAt      DateTime     @default(now())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt

  @@index([title])
}

enum BlogStatus {
  DRAFT
  PUBLISH
}

model BlogCategory {
  id        String   @id @default(uuid())
  title     String   @db.VarChar(50)
  blogs     Blog[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("blog_category")
}

model Photo {
  id      String  @id @default(uuid())
  path    String  @db.VarChar(255)
  path_md String  @db.VarChar(255)
  index   Int     @default(0) @db.Int
  blog    Blog?   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId  String?
}

model Course {
  id               String         @id @default(uuid())
  title            String         @db.VarChar(100)
  price            Int            @db.Int
  category         CourseCategory @relation(fields: [courseCategoryId], references: [id])
  courseCategoryId String
  status           CourseStatus   @default(DRAFT)
  thumbnail        String?        @db.VarChar(255)
  thumbnail_md     String?        @db.VarChar(255)
  deleted          Boolean        @default(false)
  publishAt        DateTime       @default(now())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt

  @@index([title])
}

model CourseCategory {
  id        String   @id @default(uuid())
  title     String   @db.VarChar(50)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  courses   Course[]
}

enum CourseStatus {
  DRAFT
  PUBLISH
}
